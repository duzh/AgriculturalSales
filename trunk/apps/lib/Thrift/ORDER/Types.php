<?php
namespace ORDER;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class IntDTO {
  static $_TSPEC;

  public $value = null;
  public $code = null;
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'value',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IntDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IntDTO');
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::I32, 1);
      $xfer += $output->writeI32($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 2);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 3);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StringDTO {
  static $_TSPEC;

  public $value = null;
  public $code = null;
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'StringDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StringDTO');
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 1);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 2);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 3);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BooleanDTO {
  static $_TSPEC;

  public $value = null;
  public $code = null;
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'value',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'BooleanDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BooleanDTO');
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::BOOL, 1);
      $xfer += $output->writeBool($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 2);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 3);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderAddressInfoDTO {
  static $_TSPEC;

  public $id = null;
  public $orderSn = null;
  public $provinceName = null;
  public $provinceId = null;
  public $cityId = null;
  public $cityName = null;
  public $districtId = null;
  public $districtName = null;
  public $townId = null;
  public $townName = null;
  public $villageId = null;
  public $villageName = null;
  public $address = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'provinceName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'provinceId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'cityId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'cityName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'districtId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'districtName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'townId',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'townName',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'villageId',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'villageName',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['provinceName'])) {
        $this->provinceName = $vals['provinceName'];
      }
      if (isset($vals['provinceId'])) {
        $this->provinceId = $vals['provinceId'];
      }
      if (isset($vals['cityId'])) {
        $this->cityId = $vals['cityId'];
      }
      if (isset($vals['cityName'])) {
        $this->cityName = $vals['cityName'];
      }
      if (isset($vals['districtId'])) {
        $this->districtId = $vals['districtId'];
      }
      if (isset($vals['districtName'])) {
        $this->districtName = $vals['districtName'];
      }
      if (isset($vals['townId'])) {
        $this->townId = $vals['townId'];
      }
      if (isset($vals['townName'])) {
        $this->townName = $vals['townName'];
      }
      if (isset($vals['villageId'])) {
        $this->villageId = $vals['villageId'];
      }
      if (isset($vals['villageName'])) {
        $this->villageName = $vals['villageName'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
    }
  }

  public function getName() {
    return 'OrderAddressInfoDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->provinceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->provinceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->districtId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->districtName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->townId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->townName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->villageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->villageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderAddressInfoDTO');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 2);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->provinceName !== null) {
      $xfer += $output->writeFieldBegin('provinceName', TType::STRING, 3);
      $xfer += $output->writeString($this->provinceName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->provinceId !== null) {
      $xfer += $output->writeFieldBegin('provinceId', TType::I32, 4);
      $xfer += $output->writeI32($this->provinceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cityId !== null) {
      $xfer += $output->writeFieldBegin('cityId', TType::I32, 5);
      $xfer += $output->writeI32($this->cityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cityName !== null) {
      $xfer += $output->writeFieldBegin('cityName', TType::STRING, 6);
      $xfer += $output->writeString($this->cityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->districtId !== null) {
      $xfer += $output->writeFieldBegin('districtId', TType::I32, 7);
      $xfer += $output->writeI32($this->districtId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->districtName !== null) {
      $xfer += $output->writeFieldBegin('districtName', TType::STRING, 8);
      $xfer += $output->writeString($this->districtName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->townId !== null) {
      $xfer += $output->writeFieldBegin('townId', TType::I32, 9);
      $xfer += $output->writeI32($this->townId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->townName !== null) {
      $xfer += $output->writeFieldBegin('townName', TType::STRING, 10);
      $xfer += $output->writeString($this->townName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->villageId !== null) {
      $xfer += $output->writeFieldBegin('villageId', TType::I32, 11);
      $xfer += $output->writeI32($this->villageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->villageName !== null) {
      $xfer += $output->writeFieldBegin('villageName', TType::STRING, 12);
      $xfer += $output->writeString($this->villageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 13);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderGoodsInfoDTO {
  static $_TSPEC;

  public $id = null;
  public $orderSn = null;
  public $itemId = null;
  public $goodsId = null;
  public $goodsCode = null;
  public $goodsName = null;
  public $goodsType = null;
  public $goodsAttr = null;
  public $goodsUnit = null;
  public $goodsNumber = null;
  public $marketPrice = null;
  public $salePrice = null;
  public $supplierId = null;
  public $supplierName = null;
  public $supplierPhone = null;
  public $createTime = null;
  public $isCancelled = null;
  public $isHaigou = null;
  public $goodsFreight = null;
  public $promotionId = null;
  public $promotionType = null;
  public $promotionName = null;
  public $goodsRemark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'itemId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'goodsId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'goodsCode',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'goodsName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'goodsType',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'goodsAttr',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'goodsUnit',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'goodsNumber',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'marketPrice',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'salePrice',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'supplierId',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'supplierName',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'supplierPhone',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'isCancelled',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'isHaigou',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'goodsFreight',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'promotionId',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'promotionType',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'promotionName',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'goodsRemark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['goodsId'])) {
        $this->goodsId = $vals['goodsId'];
      }
      if (isset($vals['goodsCode'])) {
        $this->goodsCode = $vals['goodsCode'];
      }
      if (isset($vals['goodsName'])) {
        $this->goodsName = $vals['goodsName'];
      }
      if (isset($vals['goodsType'])) {
        $this->goodsType = $vals['goodsType'];
      }
      if (isset($vals['goodsAttr'])) {
        $this->goodsAttr = $vals['goodsAttr'];
      }
      if (isset($vals['goodsUnit'])) {
        $this->goodsUnit = $vals['goodsUnit'];
      }
      if (isset($vals['goodsNumber'])) {
        $this->goodsNumber = $vals['goodsNumber'];
      }
      if (isset($vals['marketPrice'])) {
        $this->marketPrice = $vals['marketPrice'];
      }
      if (isset($vals['salePrice'])) {
        $this->salePrice = $vals['salePrice'];
      }
      if (isset($vals['supplierId'])) {
        $this->supplierId = $vals['supplierId'];
      }
      if (isset($vals['supplierName'])) {
        $this->supplierName = $vals['supplierName'];
      }
      if (isset($vals['supplierPhone'])) {
        $this->supplierPhone = $vals['supplierPhone'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['isCancelled'])) {
        $this->isCancelled = $vals['isCancelled'];
      }
      if (isset($vals['isHaigou'])) {
        $this->isHaigou = $vals['isHaigou'];
      }
      if (isset($vals['goodsFreight'])) {
        $this->goodsFreight = $vals['goodsFreight'];
      }
      if (isset($vals['promotionId'])) {
        $this->promotionId = $vals['promotionId'];
      }
      if (isset($vals['promotionType'])) {
        $this->promotionType = $vals['promotionType'];
      }
      if (isset($vals['promotionName'])) {
        $this->promotionName = $vals['promotionName'];
      }
      if (isset($vals['goodsRemark'])) {
        $this->goodsRemark = $vals['goodsRemark'];
      }
    }
  }

  public function getName() {
    return 'OrderGoodsInfoDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goodsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goodsCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goodsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goodsType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goodsAttr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goodsUnit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goodsNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->marketPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->salePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isCancelled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isHaigou);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->goodsFreight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->promotionName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goodsRemark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderGoodsInfoDTO');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 2);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::STRING, 3);
      $xfer += $output->writeString($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsId !== null) {
      $xfer += $output->writeFieldBegin('goodsId', TType::STRING, 4);
      $xfer += $output->writeString($this->goodsId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsCode !== null) {
      $xfer += $output->writeFieldBegin('goodsCode', TType::STRING, 5);
      $xfer += $output->writeString($this->goodsCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsName !== null) {
      $xfer += $output->writeFieldBegin('goodsName', TType::STRING, 6);
      $xfer += $output->writeString($this->goodsName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsType !== null) {
      $xfer += $output->writeFieldBegin('goodsType', TType::I32, 7);
      $xfer += $output->writeI32($this->goodsType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsAttr !== null) {
      $xfer += $output->writeFieldBegin('goodsAttr', TType::STRING, 8);
      $xfer += $output->writeString($this->goodsAttr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsUnit !== null) {
      $xfer += $output->writeFieldBegin('goodsUnit', TType::STRING, 9);
      $xfer += $output->writeString($this->goodsUnit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsNumber !== null) {
      $xfer += $output->writeFieldBegin('goodsNumber', TType::I32, 10);
      $xfer += $output->writeI32($this->goodsNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->marketPrice !== null) {
      $xfer += $output->writeFieldBegin('marketPrice', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->marketPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salePrice !== null) {
      $xfer += $output->writeFieldBegin('salePrice', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->salePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierId !== null) {
      $xfer += $output->writeFieldBegin('supplierId', TType::STRING, 13);
      $xfer += $output->writeString($this->supplierId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierName !== null) {
      $xfer += $output->writeFieldBegin('supplierName', TType::STRING, 14);
      $xfer += $output->writeString($this->supplierName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierPhone !== null) {
      $xfer += $output->writeFieldBegin('supplierPhone', TType::STRING, 15);
      $xfer += $output->writeString($this->supplierPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 16);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isCancelled !== null) {
      $xfer += $output->writeFieldBegin('isCancelled', TType::I32, 17);
      $xfer += $output->writeI32($this->isCancelled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isHaigou !== null) {
      $xfer += $output->writeFieldBegin('isHaigou', TType::I32, 18);
      $xfer += $output->writeI32($this->isHaigou);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsFreight !== null) {
      $xfer += $output->writeFieldBegin('goodsFreight', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->goodsFreight);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotionId !== null) {
      $xfer += $output->writeFieldBegin('promotionId', TType::I32, 20);
      $xfer += $output->writeI32($this->promotionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotionType !== null) {
      $xfer += $output->writeFieldBegin('promotionType', TType::I32, 21);
      $xfer += $output->writeI32($this->promotionType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotionName !== null) {
      $xfer += $output->writeFieldBegin('promotionName', TType::STRING, 22);
      $xfer += $output->writeString($this->promotionName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsRemark !== null) {
      $xfer += $output->writeFieldBegin('goodsRemark', TType::STRING, 23);
      $xfer += $output->writeString($this->goodsRemark);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderLogInfoDTO {
  static $_TSPEC;

  public $id = null;
  public $orderPsn = null;
  public $orderSn = null;
  public $operateUserid = null;
  public $operateUsername = null;
  public $orderStatus = null;
  public $logTime = null;
  public $logContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderPsn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'operateUserid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'operateUsername',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'orderStatus',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'logTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'logContent',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['orderPsn'])) {
        $this->orderPsn = $vals['orderPsn'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['operateUserid'])) {
        $this->operateUserid = $vals['operateUserid'];
      }
      if (isset($vals['operateUsername'])) {
        $this->operateUsername = $vals['operateUsername'];
      }
      if (isset($vals['orderStatus'])) {
        $this->orderStatus = $vals['orderStatus'];
      }
      if (isset($vals['logTime'])) {
        $this->logTime = $vals['logTime'];
      }
      if (isset($vals['logContent'])) {
        $this->logContent = $vals['logContent'];
      }
    }
  }

  public function getName() {
    return 'OrderLogInfoDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderPsn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operateUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operateUsername);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->orderStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->logTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderLogInfoDTO');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderPsn !== null) {
      $xfer += $output->writeFieldBegin('orderPsn', TType::STRING, 2);
      $xfer += $output->writeString($this->orderPsn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 3);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operateUserid !== null) {
      $xfer += $output->writeFieldBegin('operateUserid', TType::STRING, 4);
      $xfer += $output->writeString($this->operateUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operateUsername !== null) {
      $xfer += $output->writeFieldBegin('operateUsername', TType::STRING, 5);
      $xfer += $output->writeString($this->operateUsername);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderStatus !== null) {
      $xfer += $output->writeFieldBegin('orderStatus', TType::I32, 6);
      $xfer += $output->writeI32($this->orderStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logTime !== null) {
      $xfer += $output->writeFieldBegin('logTime', TType::I64, 7);
      $xfer += $output->writeI64($this->logTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logContent !== null) {
      $xfer += $output->writeFieldBegin('logContent', TType::STRING, 8);
      $xfer += $output->writeString($this->logContent);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderMainInfoDTO {
  static $_TSPEC;

  public $id = null;
  public $orderSn = null;
  public $orderType = null;
  public $orderDevice = null;
  public $orderStatus = null;
  public $buyerUserid = null;
  public $buyerName = null;
  public $buyerPhone = null;
  public $jobNumber = null;
  public $jobUsername = null;
  public $payId = null;
  public $payWay = null;
  public $payUrl = null;
  public $payComment = null;
  public $orderAmount = null;
  public $shippingFee = null;
  public $payAmount = null;
  public $reservationShippingTime = null;
  public $createTime = null;
  public $cancelTime = null;
  public $payTime = null;
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'orderType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'orderDevice',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'orderStatus',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'buyerUserid',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'buyerName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'buyerPhone',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'jobNumber',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'jobUsername',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'payId',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'payWay',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'payUrl',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'payComment',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'orderAmount',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'shippingFee',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'payAmount',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'reservationShippingTime',
          'type' => TType::I64,
          ),
        19 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        20 => array(
          'var' => 'cancelTime',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'payTime',
          'type' => TType::I64,
          ),
        22 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['orderType'])) {
        $this->orderType = $vals['orderType'];
      }
      if (isset($vals['orderDevice'])) {
        $this->orderDevice = $vals['orderDevice'];
      }
      if (isset($vals['orderStatus'])) {
        $this->orderStatus = $vals['orderStatus'];
      }
      if (isset($vals['buyerUserid'])) {
        $this->buyerUserid = $vals['buyerUserid'];
      }
      if (isset($vals['buyerName'])) {
        $this->buyerName = $vals['buyerName'];
      }
      if (isset($vals['buyerPhone'])) {
        $this->buyerPhone = $vals['buyerPhone'];
      }
      if (isset($vals['jobNumber'])) {
        $this->jobNumber = $vals['jobNumber'];
      }
      if (isset($vals['jobUsername'])) {
        $this->jobUsername = $vals['jobUsername'];
      }
      if (isset($vals['payId'])) {
        $this->payId = $vals['payId'];
      }
      if (isset($vals['payWay'])) {
        $this->payWay = $vals['payWay'];
      }
      if (isset($vals['payUrl'])) {
        $this->payUrl = $vals['payUrl'];
      }
      if (isset($vals['payComment'])) {
        $this->payComment = $vals['payComment'];
      }
      if (isset($vals['orderAmount'])) {
        $this->orderAmount = $vals['orderAmount'];
      }
      if (isset($vals['shippingFee'])) {
        $this->shippingFee = $vals['shippingFee'];
      }
      if (isset($vals['payAmount'])) {
        $this->payAmount = $vals['payAmount'];
      }
      if (isset($vals['reservationShippingTime'])) {
        $this->reservationShippingTime = $vals['reservationShippingTime'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['cancelTime'])) {
        $this->cancelTime = $vals['cancelTime'];
      }
      if (isset($vals['payTime'])) {
        $this->payTime = $vals['payTime'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'OrderMainInfoDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->orderType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->orderDevice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->orderStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buyerUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buyerName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buyerPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobUsername);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payWay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payComment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->orderAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->shippingFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->payAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->reservationShippingTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cancelTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderMainInfoDTO');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 2);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderType !== null) {
      $xfer += $output->writeFieldBegin('orderType', TType::I32, 3);
      $xfer += $output->writeI32($this->orderType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderDevice !== null) {
      $xfer += $output->writeFieldBegin('orderDevice', TType::I32, 4);
      $xfer += $output->writeI32($this->orderDevice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderStatus !== null) {
      $xfer += $output->writeFieldBegin('orderStatus', TType::I32, 5);
      $xfer += $output->writeI32($this->orderStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyerUserid !== null) {
      $xfer += $output->writeFieldBegin('buyerUserid', TType::STRING, 6);
      $xfer += $output->writeString($this->buyerUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyerName !== null) {
      $xfer += $output->writeFieldBegin('buyerName', TType::STRING, 7);
      $xfer += $output->writeString($this->buyerName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyerPhone !== null) {
      $xfer += $output->writeFieldBegin('buyerPhone', TType::STRING, 8);
      $xfer += $output->writeString($this->buyerPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobNumber !== null) {
      $xfer += $output->writeFieldBegin('jobNumber', TType::STRING, 9);
      $xfer += $output->writeString($this->jobNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobUsername !== null) {
      $xfer += $output->writeFieldBegin('jobUsername', TType::STRING, 10);
      $xfer += $output->writeString($this->jobUsername);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payId !== null) {
      $xfer += $output->writeFieldBegin('payId', TType::I32, 11);
      $xfer += $output->writeI32($this->payId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payWay !== null) {
      $xfer += $output->writeFieldBegin('payWay', TType::STRING, 12);
      $xfer += $output->writeString($this->payWay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payUrl !== null) {
      $xfer += $output->writeFieldBegin('payUrl', TType::STRING, 13);
      $xfer += $output->writeString($this->payUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payComment !== null) {
      $xfer += $output->writeFieldBegin('payComment', TType::STRING, 14);
      $xfer += $output->writeString($this->payComment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderAmount !== null) {
      $xfer += $output->writeFieldBegin('orderAmount', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->orderAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shippingFee !== null) {
      $xfer += $output->writeFieldBegin('shippingFee', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->shippingFee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payAmount !== null) {
      $xfer += $output->writeFieldBegin('payAmount', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->payAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reservationShippingTime !== null) {
      $xfer += $output->writeFieldBegin('reservationShippingTime', TType::I64, 18);
      $xfer += $output->writeI64($this->reservationShippingTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 19);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cancelTime !== null) {
      $xfer += $output->writeFieldBegin('cancelTime', TType::I64, 20);
      $xfer += $output->writeI64($this->cancelTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payTime !== null) {
      $xfer += $output->writeFieldBegin('payTime', TType::I64, 21);
      $xfer += $output->writeI64($this->payTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 22);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderPreferentialInfoDTO {
  static $_TSPEC;

  public $id = null;
  public $orderSn = null;
  public $preferId = null;
  public $preferCode = null;
  public $preferName = null;
  public $preferAmount = null;
  public $supplierId = null;
  public $supplierName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'preferId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'preferCode',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'preferName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'preferAmount',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'supplierId',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'supplierName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['preferId'])) {
        $this->preferId = $vals['preferId'];
      }
      if (isset($vals['preferCode'])) {
        $this->preferCode = $vals['preferCode'];
      }
      if (isset($vals['preferName'])) {
        $this->preferName = $vals['preferName'];
      }
      if (isset($vals['preferAmount'])) {
        $this->preferAmount = $vals['preferAmount'];
      }
      if (isset($vals['supplierId'])) {
        $this->supplierId = $vals['supplierId'];
      }
      if (isset($vals['supplierName'])) {
        $this->supplierName = $vals['supplierName'];
      }
    }
  }

  public function getName() {
    return 'OrderPreferentialInfoDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->preferId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->preferCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->preferName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->preferAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderPreferentialInfoDTO');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 2);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferId !== null) {
      $xfer += $output->writeFieldBegin('preferId', TType::STRING, 3);
      $xfer += $output->writeString($this->preferId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferCode !== null) {
      $xfer += $output->writeFieldBegin('preferCode', TType::STRING, 4);
      $xfer += $output->writeString($this->preferCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferName !== null) {
      $xfer += $output->writeFieldBegin('preferName', TType::STRING, 5);
      $xfer += $output->writeString($this->preferName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferAmount !== null) {
      $xfer += $output->writeFieldBegin('preferAmount', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->preferAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierId !== null) {
      $xfer += $output->writeFieldBegin('supplierId', TType::STRING, 7);
      $xfer += $output->writeString($this->supplierId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierName !== null) {
      $xfer += $output->writeFieldBegin('supplierName', TType::STRING, 8);
      $xfer += $output->writeString($this->supplierName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderServiceLogDTO {
  static $_TSPEC;

  public $id = null;
  public $appCode = null;
  public $appName = null;
  public $interfaceName = null;
  public $operationTime = null;
  public $flag = null;
  public $logTime = null;
  public $logContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'appCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'interfaceName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'operationTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'logTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'logContent',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['appCode'])) {
        $this->appCode = $vals['appCode'];
      }
      if (isset($vals['appName'])) {
        $this->appName = $vals['appName'];
      }
      if (isset($vals['interfaceName'])) {
        $this->interfaceName = $vals['interfaceName'];
      }
      if (isset($vals['operationTime'])) {
        $this->operationTime = $vals['operationTime'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['logTime'])) {
        $this->logTime = $vals['logTime'];
      }
      if (isset($vals['logContent'])) {
        $this->logContent = $vals['logContent'];
      }
    }
  }

  public function getName() {
    return 'OrderServiceLogDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->interfaceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->operationTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->logTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderServiceLogDTO');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appCode !== null) {
      $xfer += $output->writeFieldBegin('appCode', TType::STRING, 2);
      $xfer += $output->writeString($this->appCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appName !== null) {
      $xfer += $output->writeFieldBegin('appName', TType::STRING, 3);
      $xfer += $output->writeString($this->appName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->interfaceName !== null) {
      $xfer += $output->writeFieldBegin('interfaceName', TType::STRING, 4);
      $xfer += $output->writeString($this->interfaceName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationTime !== null) {
      $xfer += $output->writeFieldBegin('operationTime', TType::I64, 5);
      $xfer += $output->writeI64($this->operationTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 6);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logTime !== null) {
      $xfer += $output->writeFieldBegin('logTime', TType::I64, 7);
      $xfer += $output->writeI64($this->logTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logContent !== null) {
      $xfer += $output->writeFieldBegin('logContent', TType::STRING, 8);
      $xfer += $output->writeString($this->logContent);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderShippingInfoDTO {
  static $_TSPEC;

  public $id = null;
  public $orderSn = null;
  public $shippingId = null;
  public $consignee = null;
  public $phone = null;
  public $buyerName = null;
  public $buyerPhone = null;
  public $province = null;
  public $city = null;
  public $district = null;
  public $town = null;
  public $village = null;
  public $address = null;
  public $buyerComment = null;
  public $deliveryId = null;
  public $deliveryWay = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'shippingId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'consignee',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'buyerName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'buyerPhone',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'province',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'district',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'town',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'village',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'buyerComment',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'deliveryId',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'deliveryWay',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['shippingId'])) {
        $this->shippingId = $vals['shippingId'];
      }
      if (isset($vals['consignee'])) {
        $this->consignee = $vals['consignee'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['buyerName'])) {
        $this->buyerName = $vals['buyerName'];
      }
      if (isset($vals['buyerPhone'])) {
        $this->buyerPhone = $vals['buyerPhone'];
      }
      if (isset($vals['province'])) {
        $this->province = $vals['province'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['district'])) {
        $this->district = $vals['district'];
      }
      if (isset($vals['town'])) {
        $this->town = $vals['town'];
      }
      if (isset($vals['village'])) {
        $this->village = $vals['village'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['buyerComment'])) {
        $this->buyerComment = $vals['buyerComment'];
      }
      if (isset($vals['deliveryId'])) {
        $this->deliveryId = $vals['deliveryId'];
      }
      if (isset($vals['deliveryWay'])) {
        $this->deliveryWay = $vals['deliveryWay'];
      }
    }
  }

  public function getName() {
    return 'OrderShippingInfoDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shippingId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->consignee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buyerName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buyerPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->province);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->district);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->town);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->village);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buyerComment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->deliveryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deliveryWay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderShippingInfoDTO');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 2);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shippingId !== null) {
      $xfer += $output->writeFieldBegin('shippingId', TType::STRING, 3);
      $xfer += $output->writeString($this->shippingId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consignee !== null) {
      $xfer += $output->writeFieldBegin('consignee', TType::STRING, 4);
      $xfer += $output->writeString($this->consignee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 5);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyerName !== null) {
      $xfer += $output->writeFieldBegin('buyerName', TType::STRING, 6);
      $xfer += $output->writeString($this->buyerName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyerPhone !== null) {
      $xfer += $output->writeFieldBegin('buyerPhone', TType::STRING, 7);
      $xfer += $output->writeString($this->buyerPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->province !== null) {
      $xfer += $output->writeFieldBegin('province', TType::STRING, 8);
      $xfer += $output->writeString($this->province);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 9);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->district !== null) {
      $xfer += $output->writeFieldBegin('district', TType::STRING, 10);
      $xfer += $output->writeString($this->district);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->town !== null) {
      $xfer += $output->writeFieldBegin('town', TType::STRING, 11);
      $xfer += $output->writeString($this->town);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->village !== null) {
      $xfer += $output->writeFieldBegin('village', TType::STRING, 12);
      $xfer += $output->writeString($this->village);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 13);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyerComment !== null) {
      $xfer += $output->writeFieldBegin('buyerComment', TType::STRING, 14);
      $xfer += $output->writeString($this->buyerComment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveryId !== null) {
      $xfer += $output->writeFieldBegin('deliveryId', TType::I32, 15);
      $xfer += $output->writeI32($this->deliveryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveryWay !== null) {
      $xfer += $output->writeFieldBegin('deliveryWay', TType::STRING, 16);
      $xfer += $output->writeString($this->deliveryWay);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderSubInfoDTO {
  static $_TSPEC;

  public $id = null;
  public $orderSn = null;
  public $orderPsn = null;
  public $supplierId = null;
  public $supplierName = null;
  public $supplierPhone = null;
  public $supplierComment = null;
  public $orderStatus = null;
  public $orderAmount = null;
  public $shippingFee = null;
  public $payAmount = null;
  public $orderActivityType = null;
  public $orderActivityName = null;
  public $createTime = null;
  public $confirmTime = null;
  public $cancelTime = null;
  public $payTime = null;
  public $shippingTime = null;
  public $isSearchable = null;
  public $isPreferential = null;
  public $u8Status = null;
  public $commissionStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'orderPsn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'supplierId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'supplierName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'supplierPhone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'supplierComment',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'orderStatus',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'orderAmount',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'shippingFee',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'payAmount',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'orderActivityType',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'orderActivityName',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'confirmTime',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'cancelTime',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'payTime',
          'type' => TType::I64,
          ),
        18 => array(
          'var' => 'shippingTime',
          'type' => TType::I64,
          ),
        19 => array(
          'var' => 'isSearchable',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'isPreferential',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'u8Status',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'commissionStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['orderPsn'])) {
        $this->orderPsn = $vals['orderPsn'];
      }
      if (isset($vals['supplierId'])) {
        $this->supplierId = $vals['supplierId'];
      }
      if (isset($vals['supplierName'])) {
        $this->supplierName = $vals['supplierName'];
      }
      if (isset($vals['supplierPhone'])) {
        $this->supplierPhone = $vals['supplierPhone'];
      }
      if (isset($vals['supplierComment'])) {
        $this->supplierComment = $vals['supplierComment'];
      }
      if (isset($vals['orderStatus'])) {
        $this->orderStatus = $vals['orderStatus'];
      }
      if (isset($vals['orderAmount'])) {
        $this->orderAmount = $vals['orderAmount'];
      }
      if (isset($vals['shippingFee'])) {
        $this->shippingFee = $vals['shippingFee'];
      }
      if (isset($vals['payAmount'])) {
        $this->payAmount = $vals['payAmount'];
      }
      if (isset($vals['orderActivityType'])) {
        $this->orderActivityType = $vals['orderActivityType'];
      }
      if (isset($vals['orderActivityName'])) {
        $this->orderActivityName = $vals['orderActivityName'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['confirmTime'])) {
        $this->confirmTime = $vals['confirmTime'];
      }
      if (isset($vals['cancelTime'])) {
        $this->cancelTime = $vals['cancelTime'];
      }
      if (isset($vals['payTime'])) {
        $this->payTime = $vals['payTime'];
      }
      if (isset($vals['shippingTime'])) {
        $this->shippingTime = $vals['shippingTime'];
      }
      if (isset($vals['isSearchable'])) {
        $this->isSearchable = $vals['isSearchable'];
      }
      if (isset($vals['isPreferential'])) {
        $this->isPreferential = $vals['isPreferential'];
      }
      if (isset($vals['u8Status'])) {
        $this->u8Status = $vals['u8Status'];
      }
      if (isset($vals['commissionStatus'])) {
        $this->commissionStatus = $vals['commissionStatus'];
      }
    }
  }

  public function getName() {
    return 'OrderSubInfoDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderPsn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierComment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->orderStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->orderAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->shippingFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->payAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->orderActivityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderActivityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->confirmTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cancelTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->shippingTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isSearchable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isPreferential);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->u8Status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commissionStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderSubInfoDTO');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 2);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderPsn !== null) {
      $xfer += $output->writeFieldBegin('orderPsn', TType::STRING, 3);
      $xfer += $output->writeString($this->orderPsn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierId !== null) {
      $xfer += $output->writeFieldBegin('supplierId', TType::STRING, 4);
      $xfer += $output->writeString($this->supplierId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierName !== null) {
      $xfer += $output->writeFieldBegin('supplierName', TType::STRING, 5);
      $xfer += $output->writeString($this->supplierName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierPhone !== null) {
      $xfer += $output->writeFieldBegin('supplierPhone', TType::STRING, 6);
      $xfer += $output->writeString($this->supplierPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierComment !== null) {
      $xfer += $output->writeFieldBegin('supplierComment', TType::STRING, 7);
      $xfer += $output->writeString($this->supplierComment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderStatus !== null) {
      $xfer += $output->writeFieldBegin('orderStatus', TType::I32, 8);
      $xfer += $output->writeI32($this->orderStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderAmount !== null) {
      $xfer += $output->writeFieldBegin('orderAmount', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->orderAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shippingFee !== null) {
      $xfer += $output->writeFieldBegin('shippingFee', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->shippingFee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payAmount !== null) {
      $xfer += $output->writeFieldBegin('payAmount', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->payAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderActivityType !== null) {
      $xfer += $output->writeFieldBegin('orderActivityType', TType::I32, 12);
      $xfer += $output->writeI32($this->orderActivityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderActivityName !== null) {
      $xfer += $output->writeFieldBegin('orderActivityName', TType::STRING, 13);
      $xfer += $output->writeString($this->orderActivityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 14);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confirmTime !== null) {
      $xfer += $output->writeFieldBegin('confirmTime', TType::I64, 15);
      $xfer += $output->writeI64($this->confirmTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cancelTime !== null) {
      $xfer += $output->writeFieldBegin('cancelTime', TType::I64, 16);
      $xfer += $output->writeI64($this->cancelTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payTime !== null) {
      $xfer += $output->writeFieldBegin('payTime', TType::I64, 17);
      $xfer += $output->writeI64($this->payTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shippingTime !== null) {
      $xfer += $output->writeFieldBegin('shippingTime', TType::I64, 18);
      $xfer += $output->writeI64($this->shippingTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSearchable !== null) {
      $xfer += $output->writeFieldBegin('isSearchable', TType::I32, 19);
      $xfer += $output->writeI32($this->isSearchable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPreferential !== null) {
      $xfer += $output->writeFieldBegin('isPreferential', TType::I32, 20);
      $xfer += $output->writeI32($this->isPreferential);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->u8Status !== null) {
      $xfer += $output->writeFieldBegin('u8Status', TType::I32, 21);
      $xfer += $output->writeI32($this->u8Status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commissionStatus !== null) {
      $xfer += $output->writeFieldBegin('commissionStatus', TType::I32, 22);
      $xfer += $output->writeI32($this->commissionStatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderBasicInfoDTO {
  static $_TSPEC;

  public $id = null;
  public $orderSn = null;
  public $orderPsn = null;
  public $supplierId = null;
  public $supplierName = null;
  public $supplierPhone = null;
  public $buyerUserid = null;
  public $buyerName = null;
  public $buyerPhone = null;
  public $jobNumber = null;
  public $payId = null;
  public $payWay = null;
  public $payUrl = null;
  public $payComment = null;
  public $orderStatus = null;
  public $orderAmount = null;
  public $shippingFee = null;
  public $payAmount = null;
  public $orderActivityType = null;
  public $orderActivityName = null;
  public $createTime = null;
  public $confirmTime = null;
  public $cancelTime = null;
  public $payTime = null;
  public $shippingTime = null;
  public $reservationShippingTime = null;
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'orderPsn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'supplierId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'supplierName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'supplierPhone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'buyerUserid',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'buyerName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'buyerPhone',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'jobNumber',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'payId',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'payWay',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'payUrl',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'payComment',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'orderStatus',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'orderAmount',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'shippingFee',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'payAmount',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'orderActivityType',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'orderActivityName',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        22 => array(
          'var' => 'confirmTime',
          'type' => TType::I64,
          ),
        23 => array(
          'var' => 'cancelTime',
          'type' => TType::I64,
          ),
        24 => array(
          'var' => 'payTime',
          'type' => TType::I64,
          ),
        25 => array(
          'var' => 'shippingTime',
          'type' => TType::I64,
          ),
        26 => array(
          'var' => 'reservationShippingTime',
          'type' => TType::I64,
          ),
        27 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['orderPsn'])) {
        $this->orderPsn = $vals['orderPsn'];
      }
      if (isset($vals['supplierId'])) {
        $this->supplierId = $vals['supplierId'];
      }
      if (isset($vals['supplierName'])) {
        $this->supplierName = $vals['supplierName'];
      }
      if (isset($vals['supplierPhone'])) {
        $this->supplierPhone = $vals['supplierPhone'];
      }
      if (isset($vals['buyerUserid'])) {
        $this->buyerUserid = $vals['buyerUserid'];
      }
      if (isset($vals['buyerName'])) {
        $this->buyerName = $vals['buyerName'];
      }
      if (isset($vals['buyerPhone'])) {
        $this->buyerPhone = $vals['buyerPhone'];
      }
      if (isset($vals['jobNumber'])) {
        $this->jobNumber = $vals['jobNumber'];
      }
      if (isset($vals['payId'])) {
        $this->payId = $vals['payId'];
      }
      if (isset($vals['payWay'])) {
        $this->payWay = $vals['payWay'];
      }
      if (isset($vals['payUrl'])) {
        $this->payUrl = $vals['payUrl'];
      }
      if (isset($vals['payComment'])) {
        $this->payComment = $vals['payComment'];
      }
      if (isset($vals['orderStatus'])) {
        $this->orderStatus = $vals['orderStatus'];
      }
      if (isset($vals['orderAmount'])) {
        $this->orderAmount = $vals['orderAmount'];
      }
      if (isset($vals['shippingFee'])) {
        $this->shippingFee = $vals['shippingFee'];
      }
      if (isset($vals['payAmount'])) {
        $this->payAmount = $vals['payAmount'];
      }
      if (isset($vals['orderActivityType'])) {
        $this->orderActivityType = $vals['orderActivityType'];
      }
      if (isset($vals['orderActivityName'])) {
        $this->orderActivityName = $vals['orderActivityName'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['confirmTime'])) {
        $this->confirmTime = $vals['confirmTime'];
      }
      if (isset($vals['cancelTime'])) {
        $this->cancelTime = $vals['cancelTime'];
      }
      if (isset($vals['payTime'])) {
        $this->payTime = $vals['payTime'];
      }
      if (isset($vals['shippingTime'])) {
        $this->shippingTime = $vals['shippingTime'];
      }
      if (isset($vals['reservationShippingTime'])) {
        $this->reservationShippingTime = $vals['reservationShippingTime'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'OrderBasicInfoDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderPsn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplierPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buyerUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buyerName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buyerPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payWay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payComment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->orderStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->orderAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->shippingFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->payAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->orderActivityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderActivityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->confirmTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cancelTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->shippingTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->reservationShippingTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderBasicInfoDTO');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 2);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderPsn !== null) {
      $xfer += $output->writeFieldBegin('orderPsn', TType::STRING, 3);
      $xfer += $output->writeString($this->orderPsn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierId !== null) {
      $xfer += $output->writeFieldBegin('supplierId', TType::STRING, 4);
      $xfer += $output->writeString($this->supplierId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierName !== null) {
      $xfer += $output->writeFieldBegin('supplierName', TType::STRING, 5);
      $xfer += $output->writeString($this->supplierName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierPhone !== null) {
      $xfer += $output->writeFieldBegin('supplierPhone', TType::STRING, 6);
      $xfer += $output->writeString($this->supplierPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyerUserid !== null) {
      $xfer += $output->writeFieldBegin('buyerUserid', TType::STRING, 7);
      $xfer += $output->writeString($this->buyerUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyerName !== null) {
      $xfer += $output->writeFieldBegin('buyerName', TType::STRING, 8);
      $xfer += $output->writeString($this->buyerName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyerPhone !== null) {
      $xfer += $output->writeFieldBegin('buyerPhone', TType::STRING, 9);
      $xfer += $output->writeString($this->buyerPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobNumber !== null) {
      $xfer += $output->writeFieldBegin('jobNumber', TType::STRING, 10);
      $xfer += $output->writeString($this->jobNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payId !== null) {
      $xfer += $output->writeFieldBegin('payId', TType::I32, 11);
      $xfer += $output->writeI32($this->payId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payWay !== null) {
      $xfer += $output->writeFieldBegin('payWay', TType::STRING, 12);
      $xfer += $output->writeString($this->payWay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payUrl !== null) {
      $xfer += $output->writeFieldBegin('payUrl', TType::STRING, 13);
      $xfer += $output->writeString($this->payUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payComment !== null) {
      $xfer += $output->writeFieldBegin('payComment', TType::STRING, 14);
      $xfer += $output->writeString($this->payComment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderStatus !== null) {
      $xfer += $output->writeFieldBegin('orderStatus', TType::I32, 15);
      $xfer += $output->writeI32($this->orderStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderAmount !== null) {
      $xfer += $output->writeFieldBegin('orderAmount', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->orderAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shippingFee !== null) {
      $xfer += $output->writeFieldBegin('shippingFee', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->shippingFee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payAmount !== null) {
      $xfer += $output->writeFieldBegin('payAmount', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->payAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderActivityType !== null) {
      $xfer += $output->writeFieldBegin('orderActivityType', TType::I32, 19);
      $xfer += $output->writeI32($this->orderActivityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderActivityName !== null) {
      $xfer += $output->writeFieldBegin('orderActivityName', TType::STRING, 20);
      $xfer += $output->writeString($this->orderActivityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 21);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confirmTime !== null) {
      $xfer += $output->writeFieldBegin('confirmTime', TType::I64, 22);
      $xfer += $output->writeI64($this->confirmTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cancelTime !== null) {
      $xfer += $output->writeFieldBegin('cancelTime', TType::I64, 23);
      $xfer += $output->writeI64($this->cancelTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payTime !== null) {
      $xfer += $output->writeFieldBegin('payTime', TType::I64, 24);
      $xfer += $output->writeI64($this->payTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shippingTime !== null) {
      $xfer += $output->writeFieldBegin('shippingTime', TType::I64, 25);
      $xfer += $output->writeI64($this->shippingTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reservationShippingTime !== null) {
      $xfer += $output->writeFieldBegin('reservationShippingTime', TType::I64, 26);
      $xfer += $output->writeI64($this->reservationShippingTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 27);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderInfoDTO {
  static $_TSPEC;

  public $orderMainInfo = null;
  public $orderAddressInfo = null;
  public $orderGoodsInfo = null;
  public $orderPreferentialInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderMainInfo',
          'type' => TType::STRUCT,
          'class' => '\ORDER\OrderMainInfoDTO',
          ),
        2 => array(
          'var' => 'orderAddressInfo',
          'type' => TType::STRUCT,
          'class' => '\ORDER\OrderAddressInfoDTO',
          ),
        3 => array(
          'var' => 'orderGoodsInfo',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ORDER\OrderGoodsInfoDTO',
            ),
          ),
        4 => array(
          'var' => 'orderPreferentialInfo',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ORDER\OrderPreferentialInfoDTO',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderMainInfo'])) {
        $this->orderMainInfo = $vals['orderMainInfo'];
      }
      if (isset($vals['orderAddressInfo'])) {
        $this->orderAddressInfo = $vals['orderAddressInfo'];
      }
      if (isset($vals['orderGoodsInfo'])) {
        $this->orderGoodsInfo = $vals['orderGoodsInfo'];
      }
      if (isset($vals['orderPreferentialInfo'])) {
        $this->orderPreferentialInfo = $vals['orderPreferentialInfo'];
      }
    }
  }

  public function getName() {
    return 'OrderInfoDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->orderMainInfo = new \ORDER\OrderMainInfoDTO();
            $xfer += $this->orderMainInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orderAddressInfo = new \ORDER\OrderAddressInfoDTO();
            $xfer += $this->orderAddressInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->orderGoodsInfo = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \ORDER\OrderGoodsInfoDTO();
              $xfer += $elem5->read($input);
              $this->orderGoodsInfo []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->orderPreferentialInfo = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \ORDER\OrderPreferentialInfoDTO();
              $xfer += $elem11->read($input);
              $this->orderPreferentialInfo []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderInfoDTO');
    if ($this->orderMainInfo !== null) {
      if (!is_object($this->orderMainInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderMainInfo', TType::STRUCT, 1);
      $xfer += $this->orderMainInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderAddressInfo !== null) {
      if (!is_object($this->orderAddressInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderAddressInfo', TType::STRUCT, 2);
      $xfer += $this->orderAddressInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderGoodsInfo !== null) {
      if (!is_array($this->orderGoodsInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderGoodsInfo', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->orderGoodsInfo));
        {
          foreach ($this->orderGoodsInfo as $iter12)
          {
            $xfer += $iter12->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderPreferentialInfo !== null) {
      if (!is_array($this->orderPreferentialInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderPreferentialInfo', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->orderPreferentialInfo));
        {
          foreach ($this->orderPreferentialInfo as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderSubDetailInfoDTO {
  static $_TSPEC;

  public $basicInfo = null;
  public $orderGoodsInfo = null;
  public $orderShippingInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'basicInfo',
          'type' => TType::STRUCT,
          'class' => '\ORDER\OrderBasicInfoDTO',
          ),
        2 => array(
          'var' => 'orderGoodsInfo',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ORDER\OrderGoodsInfoDTO',
            ),
          ),
        3 => array(
          'var' => 'orderShippingInfo',
          'type' => TType::STRUCT,
          'class' => '\ORDER\OrderShippingInfoDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['basicInfo'])) {
        $this->basicInfo = $vals['basicInfo'];
      }
      if (isset($vals['orderGoodsInfo'])) {
        $this->orderGoodsInfo = $vals['orderGoodsInfo'];
      }
      if (isset($vals['orderShippingInfo'])) {
        $this->orderShippingInfo = $vals['orderShippingInfo'];
      }
    }
  }

  public function getName() {
    return 'OrderSubDetailInfoDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->basicInfo = new \ORDER\OrderBasicInfoDTO();
            $xfer += $this->basicInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->orderGoodsInfo = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \ORDER\OrderGoodsInfoDTO();
              $xfer += $elem19->read($input);
              $this->orderGoodsInfo []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->orderShippingInfo = new \ORDER\OrderShippingInfoDTO();
            $xfer += $this->orderShippingInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderSubDetailInfoDTO');
    if ($this->basicInfo !== null) {
      if (!is_object($this->basicInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('basicInfo', TType::STRUCT, 1);
      $xfer += $this->basicInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderGoodsInfo !== null) {
      if (!is_array($this->orderGoodsInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderGoodsInfo', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->orderGoodsInfo));
        {
          foreach ($this->orderGoodsInfo as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderShippingInfo !== null) {
      if (!is_object($this->orderShippingInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderShippingInfo', TType::STRUCT, 3);
      $xfer += $this->orderShippingInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderOperatorDTO {
  static $_TSPEC;

  public $userId = null;
  public $userName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
    }
  }

  public function getName() {
    return 'OrderOperatorDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderOperatorDTO');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::STRING, 1);
      $xfer += $output->writeString($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 2);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShippingDTO {
  static $_TSPEC;

  public $consignee = null;
  public $phone = null;
  public $buyerComment = null;
  public $deliveryId = null;
  public $deliveryWay = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consignee',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'buyerComment',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'deliveryId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'deliveryWay',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['consignee'])) {
        $this->consignee = $vals['consignee'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['buyerComment'])) {
        $this->buyerComment = $vals['buyerComment'];
      }
      if (isset($vals['deliveryId'])) {
        $this->deliveryId = $vals['deliveryId'];
      }
      if (isset($vals['deliveryWay'])) {
        $this->deliveryWay = $vals['deliveryWay'];
      }
    }
  }

  public function getName() {
    return 'ShippingDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->consignee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buyerComment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->deliveryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deliveryWay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShippingDTO');
    if ($this->consignee !== null) {
      $xfer += $output->writeFieldBegin('consignee', TType::STRING, 1);
      $xfer += $output->writeString($this->consignee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 2);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyerComment !== null) {
      $xfer += $output->writeFieldBegin('buyerComment', TType::STRING, 3);
      $xfer += $output->writeString($this->buyerComment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveryId !== null) {
      $xfer += $output->writeFieldBegin('deliveryId', TType::I32, 4);
      $xfer += $output->writeI32($this->deliveryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveryWay !== null) {
      $xfer += $output->writeFieldBegin('deliveryWay', TType::STRING, 5);
      $xfer += $output->writeString($this->deliveryWay);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


