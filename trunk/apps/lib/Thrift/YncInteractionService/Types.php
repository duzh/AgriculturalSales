<?php

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class StringDTO {
  static $_TSPEC;

  public $value = null;
  public $success = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'StringDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StringDTO');
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 1);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 2);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 3);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BooleanDTO {
  static $_TSPEC;

  public $value = null;
  public $success = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'value',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'BooleanDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BooleanDTO');
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::BOOL, 1);
      $xfer += $output->writeBool($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 2);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 3);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PayLogDTO {
  static $_TSPEC;

  public $createDate = null;
  public $orderNum = null;
  public $payType = null;
  public $amount = null;
  public $status = null;
  public $payDate = null;
  public $completeDate = null;
  public $serialNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'createDate',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'orderNum',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'payType',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'payDate',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'completeDate',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'serialNum',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['orderNum'])) {
        $this->orderNum = $vals['orderNum'];
      }
      if (isset($vals['payType'])) {
        $this->payType = $vals['payType'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['payDate'])) {
        $this->payDate = $vals['payDate'];
      }
      if (isset($vals['completeDate'])) {
        $this->completeDate = $vals['completeDate'];
      }
      if (isset($vals['serialNum'])) {
        $this->serialNum = $vals['serialNum'];
      }
    }
  }

  public function getName() {
    return 'PayLogDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->completeDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serialNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayLogDTO');
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::STRING, 1);
      $xfer += $output->writeString($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderNum !== null) {
      $xfer += $output->writeFieldBegin('orderNum', TType::STRING, 2);
      $xfer += $output->writeString($this->orderNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payType !== null) {
      $xfer += $output->writeFieldBegin('payType', TType::STRING, 3);
      $xfer += $output->writeString($this->payType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 5);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payDate !== null) {
      $xfer += $output->writeFieldBegin('payDate', TType::STRING, 6);
      $xfer += $output->writeString($this->payDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->completeDate !== null) {
      $xfer += $output->writeFieldBegin('completeDate', TType::STRING, 7);
      $xfer += $output->writeString($this->completeDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serialNum !== null) {
      $xfer += $output->writeFieldBegin('serialNum', TType::STRING, 8);
      $xfer += $output->writeString($this->serialNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PayLogListDTO {
  static $_TSPEC;

  public $payLogList = null;
  public $totalRecord = null;
  public $success = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payLogList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\PayLogDTO',
            ),
          ),
        2 => array(
          'var' => 'totalRecord',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['payLogList'])) {
        $this->payLogList = $vals['payLogList'];
      }
      if (isset($vals['totalRecord'])) {
        $this->totalRecord = $vals['totalRecord'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'PayLogListDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->payLogList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \PayLogDTO();
              $xfer += $elem5->read($input);
              $this->payLogList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalRecord);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayLogListDTO');
    if ($this->payLogList !== null) {
      if (!is_array($this->payLogList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('payLogList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->payLogList));
        {
          foreach ($this->payLogList as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalRecord !== null) {
      $xfer += $output->writeFieldBegin('totalRecord', TType::I32, 2);
      $xfer += $output->writeI32($this->totalRecord);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 3);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 4);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AmountDTO {
  static $_TSPEC;

  public $account = null;
  public $freeezeAccount = null;
  public $success = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'account',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'freeezeAccount',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['account'])) {
        $this->account = $vals['account'];
      }
      if (isset($vals['freeezeAccount'])) {
        $this->freeezeAccount = $vals['freeezeAccount'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'AmountDTO';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->freeezeAccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AmountDTO');
    if ($this->account !== null) {
      $xfer += $output->writeFieldBegin('account', TType::STRING, 1);
      $xfer += $output->writeString($this->account);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeezeAccount !== null) {
      $xfer += $output->writeFieldBegin('freeezeAccount', TType::STRING, 2);
      $xfer += $output->writeString($this->freeezeAccount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 3);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 4);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


