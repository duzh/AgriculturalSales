<?php
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface YncInteractionServiceIf {
  public function getAmountByUserId($userId);
  public function getAmountByUserPhone($userPhone);
  public function userDataSync($userId, $userPhone, $userEmail, $userLoginPassword, $regDate, $realName, $userPayPassword, $userSafeQuestion, $userSafeAnswer, $idcardNum, $amount);
  public function createBindToken($ip, $userPhone, $sign);
  public function checkYnpToken($token);
  public function postYnpBind($uicUserId, $ynpUsername, $ynpUserpass);
  public function checkPhoneExist($userPhone);
  public function searchOpsDepositByUserPhone($userPhone, $source, $dateInt, $pageIndex, $pageSize);
  public function searchOpsTransactionByUserPhone($userPhone, $source, $dateInt, $status, $orderNo, $serialNum, $pageIndex, $pageSize);
  public function searchOpsWithdrawByUserPhone($userPhone, $source, $dateInt, $pageIndex, $pageSize);
  public function searchOpsTransactionBySellerUserPhone($sellerUserPhone, $source, $dateInt, $status, $orderNo, $serialNum, $pageIndex, $pageSize);
  public function noticeOpsTransactionStatus($orderNo, $status, $source, $payType, $sign);
  public function noticeOpsTransactionClose($orderNo, $source, $sign);
  public function noticeRechargeOpsTransactionStatus($orderNo, $status, $orderAmount, $paymetChannel, $source, $sign);
  public function noticeOpsTransactionAmount($orderNo, $orderAmount, $source, $sign);
}

class YncInteractionServiceClient implements \YncInteractionServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getAmountByUserId($userId)
  {
    $this->send_getAmountByUserId($userId);
    return $this->recv_getAmountByUserId();
  }

  public function send_getAmountByUserId($userId)
  {
    $args = new \YncInteractionService_getAmountByUserId_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAmountByUserId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAmountByUserId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAmountByUserId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_getAmountByUserId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_getAmountByUserId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAmountByUserId failed: unknown result");
  }

  public function getAmountByUserPhone($userPhone)
  {
    $this->send_getAmountByUserPhone($userPhone);
    return $this->recv_getAmountByUserPhone();
  }

  public function send_getAmountByUserPhone($userPhone)
  {
    $args = new \YncInteractionService_getAmountByUserPhone_args();
    $args->userPhone = $userPhone;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAmountByUserPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAmountByUserPhone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAmountByUserPhone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_getAmountByUserPhone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_getAmountByUserPhone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAmountByUserPhone failed: unknown result");
  }

  public function userDataSync($userId, $userPhone, $userEmail, $userLoginPassword, $regDate, $realName, $userPayPassword, $userSafeQuestion, $userSafeAnswer, $idcardNum, $amount)
  {
    $this->send_userDataSync($userId, $userPhone, $userEmail, $userLoginPassword, $regDate, $realName, $userPayPassword, $userSafeQuestion, $userSafeAnswer, $idcardNum, $amount);
    return $this->recv_userDataSync();
  }

  public function send_userDataSync($userId, $userPhone, $userEmail, $userLoginPassword, $regDate, $realName, $userPayPassword, $userSafeQuestion, $userSafeAnswer, $idcardNum, $amount)
  {
    $args = new \YncInteractionService_userDataSync_args();
    $args->userId = $userId;
    $args->userPhone = $userPhone;
    $args->userEmail = $userEmail;
    $args->userLoginPassword = $userLoginPassword;
    $args->regDate = $regDate;
    $args->realName = $realName;
    $args->userPayPassword = $userPayPassword;
    $args->userSafeQuestion = $userSafeQuestion;
    $args->userSafeAnswer = $userSafeAnswer;
    $args->idcardNum = $idcardNum;
    $args->amount = $amount;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'userDataSync', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('userDataSync', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_userDataSync()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_userDataSync_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_userDataSync_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("userDataSync failed: unknown result");
  }

  public function createBindToken($ip, $userPhone, $sign)
  {
    $this->send_createBindToken($ip, $userPhone, $sign);
    return $this->recv_createBindToken();
  }

  public function send_createBindToken($ip, $userPhone, $sign)
  {
    $args = new \YncInteractionService_createBindToken_args();
    $args->ip = $ip;
    $args->userPhone = $userPhone;
    $args->sign = $sign;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createBindToken', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createBindToken', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createBindToken()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_createBindToken_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_createBindToken_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("createBindToken failed: unknown result");
  }

  public function checkYnpToken($token)
  {
    $this->send_checkYnpToken($token);
    return $this->recv_checkYnpToken();
  }

  public function send_checkYnpToken($token)
  {
    $args = new \YncInteractionService_checkYnpToken_args();
    $args->token = $token;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkYnpToken', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkYnpToken', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkYnpToken()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_checkYnpToken_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_checkYnpToken_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkYnpToken failed: unknown result");
  }

  public function postYnpBind($uicUserId, $ynpUsername, $ynpUserpass)
  {
    $this->send_postYnpBind($uicUserId, $ynpUsername, $ynpUserpass);
    return $this->recv_postYnpBind();
  }

  public function send_postYnpBind($uicUserId, $ynpUsername, $ynpUserpass)
  {
    $args = new \YncInteractionService_postYnpBind_args();
    $args->uicUserId = $uicUserId;
    $args->ynpUsername = $ynpUsername;
    $args->ynpUserpass = $ynpUserpass;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'postYnpBind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('postYnpBind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_postYnpBind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_postYnpBind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_postYnpBind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("postYnpBind failed: unknown result");
  }

  public function checkPhoneExist($userPhone)
  {
    $this->send_checkPhoneExist($userPhone);
    return $this->recv_checkPhoneExist();
  }

  public function send_checkPhoneExist($userPhone)
  {
    $args = new \YncInteractionService_checkPhoneExist_args();
    $args->userPhone = $userPhone;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkPhoneExist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkPhoneExist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkPhoneExist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_checkPhoneExist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_checkPhoneExist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkPhoneExist failed: unknown result");
  }

  public function searchOpsDepositByUserPhone($userPhone, $source, $dateInt, $pageIndex, $pageSize)
  {
    $this->send_searchOpsDepositByUserPhone($userPhone, $source, $dateInt, $pageIndex, $pageSize);
    return $this->recv_searchOpsDepositByUserPhone();
  }

  public function send_searchOpsDepositByUserPhone($userPhone, $source, $dateInt, $pageIndex, $pageSize)
  {
    $args = new \YncInteractionService_searchOpsDepositByUserPhone_args();
    $args->userPhone = $userPhone;
    $args->source = $source;
    $args->dateInt = $dateInt;
    $args->pageIndex = $pageIndex;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchOpsDepositByUserPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchOpsDepositByUserPhone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchOpsDepositByUserPhone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_searchOpsDepositByUserPhone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_searchOpsDepositByUserPhone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("searchOpsDepositByUserPhone failed: unknown result");
  }

  public function searchOpsTransactionByUserPhone($userPhone, $source, $dateInt, $status, $orderNo, $serialNum, $pageIndex, $pageSize)
  {
    $this->send_searchOpsTransactionByUserPhone($userPhone, $source, $dateInt, $status, $orderNo, $serialNum, $pageIndex, $pageSize);
    return $this->recv_searchOpsTransactionByUserPhone();
  }

  public function send_searchOpsTransactionByUserPhone($userPhone, $source, $dateInt, $status, $orderNo, $serialNum, $pageIndex, $pageSize)
  {
    $args = new \YncInteractionService_searchOpsTransactionByUserPhone_args();
    $args->userPhone = $userPhone;
    $args->source = $source;
    $args->dateInt = $dateInt;
    $args->status = $status;
    $args->orderNo = $orderNo;
    $args->serialNum = $serialNum;
    $args->pageIndex = $pageIndex;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchOpsTransactionByUserPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchOpsTransactionByUserPhone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchOpsTransactionByUserPhone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_searchOpsTransactionByUserPhone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_searchOpsTransactionByUserPhone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("searchOpsTransactionByUserPhone failed: unknown result");
  }

  public function searchOpsWithdrawByUserPhone($userPhone, $source, $dateInt, $pageIndex, $pageSize)
  {
    $this->send_searchOpsWithdrawByUserPhone($userPhone, $source, $dateInt, $pageIndex, $pageSize);
    return $this->recv_searchOpsWithdrawByUserPhone();
  }

  public function send_searchOpsWithdrawByUserPhone($userPhone, $source, $dateInt, $pageIndex, $pageSize)
  {
    $args = new \YncInteractionService_searchOpsWithdrawByUserPhone_args();
    $args->userPhone = $userPhone;
    $args->source = $source;
    $args->dateInt = $dateInt;
    $args->pageIndex = $pageIndex;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchOpsWithdrawByUserPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchOpsWithdrawByUserPhone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchOpsWithdrawByUserPhone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_searchOpsWithdrawByUserPhone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_searchOpsWithdrawByUserPhone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("searchOpsWithdrawByUserPhone failed: unknown result");
  }

  public function searchOpsTransactionBySellerUserPhone($sellerUserPhone, $source, $dateInt, $status, $orderNo, $serialNum, $pageIndex, $pageSize)
  {
    $this->send_searchOpsTransactionBySellerUserPhone($sellerUserPhone, $source, $dateInt, $status, $orderNo, $serialNum, $pageIndex, $pageSize);
    return $this->recv_searchOpsTransactionBySellerUserPhone();
  }

  public function send_searchOpsTransactionBySellerUserPhone($sellerUserPhone, $source, $dateInt, $status, $orderNo, $serialNum, $pageIndex, $pageSize)
  {
    $args = new \YncInteractionService_searchOpsTransactionBySellerUserPhone_args();
    $args->sellerUserPhone = $sellerUserPhone;
    $args->source = $source;
    $args->dateInt = $dateInt;
    $args->status = $status;
    $args->orderNo = $orderNo;
    $args->serialNum = $serialNum;
    $args->pageIndex = $pageIndex;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchOpsTransactionBySellerUserPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchOpsTransactionBySellerUserPhone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchOpsTransactionBySellerUserPhone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_searchOpsTransactionBySellerUserPhone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_searchOpsTransactionBySellerUserPhone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("searchOpsTransactionBySellerUserPhone failed: unknown result");
  }

  public function noticeOpsTransactionStatus($orderNo, $status, $source, $payType, $sign)
  {
    $this->send_noticeOpsTransactionStatus($orderNo, $status, $source, $payType, $sign);
    return $this->recv_noticeOpsTransactionStatus();
  }

  public function send_noticeOpsTransactionStatus($orderNo, $status, $source, $payType, $sign)
  {
    $args = new \YncInteractionService_noticeOpsTransactionStatus_args();
    $args->orderNo = $orderNo;
    $args->status = $status;
    $args->source = $source;
    $args->payType = $payType;
    $args->sign = $sign;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'noticeOpsTransactionStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('noticeOpsTransactionStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_noticeOpsTransactionStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_noticeOpsTransactionStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_noticeOpsTransactionStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("noticeOpsTransactionStatus failed: unknown result");
  }

  public function noticeOpsTransactionClose($orderNo, $source, $sign)
  {
    $this->send_noticeOpsTransactionClose($orderNo, $source, $sign);
    return $this->recv_noticeOpsTransactionClose();
  }

  public function send_noticeOpsTransactionClose($orderNo, $source, $sign)
  {
    $args = new \YncInteractionService_noticeOpsTransactionClose_args();
    $args->orderNo = $orderNo;
    $args->source = $source;
    $args->sign = $sign;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'noticeOpsTransactionClose', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('noticeOpsTransactionClose', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_noticeOpsTransactionClose()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_noticeOpsTransactionClose_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_noticeOpsTransactionClose_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("noticeOpsTransactionClose failed: unknown result");
  }

  public function noticeRechargeOpsTransactionStatus($orderNo, $status, $orderAmount, $paymetChannel, $source, $sign)
  {
    $this->send_noticeRechargeOpsTransactionStatus($orderNo, $status, $orderAmount, $paymetChannel, $source, $sign);
    return $this->recv_noticeRechargeOpsTransactionStatus();
  }

  public function send_noticeRechargeOpsTransactionStatus($orderNo, $status, $orderAmount, $paymetChannel, $source, $sign)
  {
    $args = new \YncInteractionService_noticeRechargeOpsTransactionStatus_args();
    $args->orderNo = $orderNo;
    $args->status = $status;
    $args->orderAmount = $orderAmount;
    $args->paymetChannel = $paymetChannel;
    $args->source = $source;
    $args->sign = $sign;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'noticeRechargeOpsTransactionStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('noticeRechargeOpsTransactionStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_noticeRechargeOpsTransactionStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_noticeRechargeOpsTransactionStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_noticeRechargeOpsTransactionStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("noticeRechargeOpsTransactionStatus failed: unknown result");
  }

  public function noticeOpsTransactionAmount($orderNo, $orderAmount, $source, $sign)
  {
    $this->send_noticeOpsTransactionAmount($orderNo, $orderAmount, $source, $sign);
    return $this->recv_noticeOpsTransactionAmount();
  }

  public function send_noticeOpsTransactionAmount($orderNo, $orderAmount, $source, $sign)
  {
    $args = new \YncInteractionService_noticeOpsTransactionAmount_args();
    $args->orderNo = $orderNo;
    $args->orderAmount = $orderAmount;
    $args->source = $source;
    $args->sign = $sign;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'noticeOpsTransactionAmount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('noticeOpsTransactionAmount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_noticeOpsTransactionAmount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\YncInteractionService_noticeOpsTransactionAmount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \YncInteractionService_noticeOpsTransactionAmount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("noticeOpsTransactionAmount failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class YncInteractionService_getAmountByUserId_args {
  static $_TSPEC;

  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_getAmountByUserId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_getAmountByUserId_args');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::STRING, 1);
      $xfer += $output->writeString($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_getAmountByUserId_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\StringDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_getAmountByUserId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \StringDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_getAmountByUserId_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_getAmountByUserPhone_args {
  static $_TSPEC;

  public $userPhone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userPhone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userPhone'])) {
        $this->userPhone = $vals['userPhone'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_getAmountByUserPhone_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_getAmountByUserPhone_args');
    if ($this->userPhone !== null) {
      $xfer += $output->writeFieldBegin('userPhone', TType::STRING, 1);
      $xfer += $output->writeString($this->userPhone);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_getAmountByUserPhone_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\AmountDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_getAmountByUserPhone_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \AmountDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_getAmountByUserPhone_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_userDataSync_args {
  static $_TSPEC;

  public $userId = null;
  public $userPhone = null;
  public $userEmail = null;
  public $userLoginPassword = null;
  public $regDate = null;
  public $realName = null;
  public $userPayPassword = null;
  public $userSafeQuestion = null;
  public $userSafeAnswer = null;
  public $idcardNum = null;
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userPhone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userEmail',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'userLoginPassword',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'regDate',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'realName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'userPayPassword',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'userSafeQuestion',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'userSafeAnswer',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'idcardNum',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'amount',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['userPhone'])) {
        $this->userPhone = $vals['userPhone'];
      }
      if (isset($vals['userEmail'])) {
        $this->userEmail = $vals['userEmail'];
      }
      if (isset($vals['userLoginPassword'])) {
        $this->userLoginPassword = $vals['userLoginPassword'];
      }
      if (isset($vals['regDate'])) {
        $this->regDate = $vals['regDate'];
      }
      if (isset($vals['realName'])) {
        $this->realName = $vals['realName'];
      }
      if (isset($vals['userPayPassword'])) {
        $this->userPayPassword = $vals['userPayPassword'];
      }
      if (isset($vals['userSafeQuestion'])) {
        $this->userSafeQuestion = $vals['userSafeQuestion'];
      }
      if (isset($vals['userSafeAnswer'])) {
        $this->userSafeAnswer = $vals['userSafeAnswer'];
      }
      if (isset($vals['idcardNum'])) {
        $this->idcardNum = $vals['idcardNum'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_userDataSync_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userLoginPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->realName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userPayPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userSafeQuestion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userSafeAnswer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idcardNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_userDataSync_args');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::STRING, 1);
      $xfer += $output->writeString($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userPhone !== null) {
      $xfer += $output->writeFieldBegin('userPhone', TType::STRING, 2);
      $xfer += $output->writeString($this->userPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userEmail !== null) {
      $xfer += $output->writeFieldBegin('userEmail', TType::STRING, 3);
      $xfer += $output->writeString($this->userEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userLoginPassword !== null) {
      $xfer += $output->writeFieldBegin('userLoginPassword', TType::STRING, 4);
      $xfer += $output->writeString($this->userLoginPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regDate !== null) {
      $xfer += $output->writeFieldBegin('regDate', TType::STRING, 5);
      $xfer += $output->writeString($this->regDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->realName !== null) {
      $xfer += $output->writeFieldBegin('realName', TType::STRING, 6);
      $xfer += $output->writeString($this->realName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userPayPassword !== null) {
      $xfer += $output->writeFieldBegin('userPayPassword', TType::STRING, 7);
      $xfer += $output->writeString($this->userPayPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userSafeQuestion !== null) {
      $xfer += $output->writeFieldBegin('userSafeQuestion', TType::STRING, 8);
      $xfer += $output->writeString($this->userSafeQuestion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userSafeAnswer !== null) {
      $xfer += $output->writeFieldBegin('userSafeAnswer', TType::STRING, 9);
      $xfer += $output->writeString($this->userSafeAnswer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idcardNum !== null) {
      $xfer += $output->writeFieldBegin('idcardNum', TType::STRING, 10);
      $xfer += $output->writeString($this->idcardNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::STRING, 11);
      $xfer += $output->writeString($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_userDataSync_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\StringDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_userDataSync_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \StringDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_userDataSync_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_createBindToken_args {
  static $_TSPEC;

  public $ip = null;
  public $userPhone = null;
  public $sign = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userPhone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['userPhone'])) {
        $this->userPhone = $vals['userPhone'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_createBindToken_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_createBindToken_args');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userPhone !== null) {
      $xfer += $output->writeFieldBegin('userPhone', TType::STRING, 2);
      $xfer += $output->writeString($this->userPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 3);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_createBindToken_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\StringDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_createBindToken_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \StringDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_createBindToken_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_checkYnpToken_args {
  static $_TSPEC;

  public $token = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_checkYnpToken_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_checkYnpToken_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_checkYnpToken_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\StringDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_checkYnpToken_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \StringDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_checkYnpToken_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_postYnpBind_args {
  static $_TSPEC;

  public $uicUserId = null;
  public $ynpUsername = null;
  public $ynpUserpass = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uicUserId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ynpUsername',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ynpUserpass',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uicUserId'])) {
        $this->uicUserId = $vals['uicUserId'];
      }
      if (isset($vals['ynpUsername'])) {
        $this->ynpUsername = $vals['ynpUsername'];
      }
      if (isset($vals['ynpUserpass'])) {
        $this->ynpUserpass = $vals['ynpUserpass'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_postYnpBind_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uicUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ynpUsername);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ynpUserpass);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_postYnpBind_args');
    if ($this->uicUserId !== null) {
      $xfer += $output->writeFieldBegin('uicUserId', TType::STRING, 1);
      $xfer += $output->writeString($this->uicUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ynpUsername !== null) {
      $xfer += $output->writeFieldBegin('ynpUsername', TType::STRING, 2);
      $xfer += $output->writeString($this->ynpUsername);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ynpUserpass !== null) {
      $xfer += $output->writeFieldBegin('ynpUserpass', TType::STRING, 3);
      $xfer += $output->writeString($this->ynpUserpass);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_postYnpBind_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\StringDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_postYnpBind_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \StringDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_postYnpBind_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_checkPhoneExist_args {
  static $_TSPEC;

  public $userPhone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userPhone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userPhone'])) {
        $this->userPhone = $vals['userPhone'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_checkPhoneExist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_checkPhoneExist_args');
    if ($this->userPhone !== null) {
      $xfer += $output->writeFieldBegin('userPhone', TType::STRING, 1);
      $xfer += $output->writeString($this->userPhone);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_checkPhoneExist_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\StringDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_checkPhoneExist_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \StringDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_checkPhoneExist_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_searchOpsDepositByUserPhone_args {
  static $_TSPEC;

  public $userPhone = null;
  public $source = null;
  public $dateInt = null;
  public $pageIndex = null;
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userPhone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'dateInt',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageIndex',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userPhone'])) {
        $this->userPhone = $vals['userPhone'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['dateInt'])) {
        $this->dateInt = $vals['dateInt'];
      }
      if (isset($vals['pageIndex'])) {
        $this->pageIndex = $vals['pageIndex'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_searchOpsDepositByUserPhone_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dateInt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_searchOpsDepositByUserPhone_args');
    if ($this->userPhone !== null) {
      $xfer += $output->writeFieldBegin('userPhone', TType::STRING, 1);
      $xfer += $output->writeString($this->userPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 2);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateInt !== null) {
      $xfer += $output->writeFieldBegin('dateInt', TType::I32, 3);
      $xfer += $output->writeI32($this->dateInt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageIndex !== null) {
      $xfer += $output->writeFieldBegin('pageIndex', TType::I32, 4);
      $xfer += $output->writeI32($this->pageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 5);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_searchOpsDepositByUserPhone_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\PayLogListDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_searchOpsDepositByUserPhone_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \PayLogListDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_searchOpsDepositByUserPhone_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_searchOpsTransactionByUserPhone_args {
  static $_TSPEC;

  public $userPhone = null;
  public $source = null;
  public $dateInt = null;
  public $status = null;
  public $orderNo = null;
  public $serialNum = null;
  public $pageIndex = null;
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userPhone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'dateInt',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'orderNo',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'serialNum',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'pageIndex',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userPhone'])) {
        $this->userPhone = $vals['userPhone'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['dateInt'])) {
        $this->dateInt = $vals['dateInt'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['orderNo'])) {
        $this->orderNo = $vals['orderNo'];
      }
      if (isset($vals['serialNum'])) {
        $this->serialNum = $vals['serialNum'];
      }
      if (isset($vals['pageIndex'])) {
        $this->pageIndex = $vals['pageIndex'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_searchOpsTransactionByUserPhone_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dateInt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serialNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_searchOpsTransactionByUserPhone_args');
    if ($this->userPhone !== null) {
      $xfer += $output->writeFieldBegin('userPhone', TType::STRING, 1);
      $xfer += $output->writeString($this->userPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 2);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateInt !== null) {
      $xfer += $output->writeFieldBegin('dateInt', TType::I32, 3);
      $xfer += $output->writeI32($this->dateInt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderNo !== null) {
      $xfer += $output->writeFieldBegin('orderNo', TType::STRING, 5);
      $xfer += $output->writeString($this->orderNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serialNum !== null) {
      $xfer += $output->writeFieldBegin('serialNum', TType::STRING, 6);
      $xfer += $output->writeString($this->serialNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageIndex !== null) {
      $xfer += $output->writeFieldBegin('pageIndex', TType::I32, 7);
      $xfer += $output->writeI32($this->pageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 8);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_searchOpsTransactionByUserPhone_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\PayLogListDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_searchOpsTransactionByUserPhone_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \PayLogListDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_searchOpsTransactionByUserPhone_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_searchOpsWithdrawByUserPhone_args {
  static $_TSPEC;

  public $userPhone = null;
  public $source = null;
  public $dateInt = null;
  public $pageIndex = null;
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userPhone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'dateInt',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageIndex',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userPhone'])) {
        $this->userPhone = $vals['userPhone'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['dateInt'])) {
        $this->dateInt = $vals['dateInt'];
      }
      if (isset($vals['pageIndex'])) {
        $this->pageIndex = $vals['pageIndex'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_searchOpsWithdrawByUserPhone_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dateInt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_searchOpsWithdrawByUserPhone_args');
    if ($this->userPhone !== null) {
      $xfer += $output->writeFieldBegin('userPhone', TType::STRING, 1);
      $xfer += $output->writeString($this->userPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 2);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateInt !== null) {
      $xfer += $output->writeFieldBegin('dateInt', TType::I32, 3);
      $xfer += $output->writeI32($this->dateInt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageIndex !== null) {
      $xfer += $output->writeFieldBegin('pageIndex', TType::I32, 4);
      $xfer += $output->writeI32($this->pageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 5);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_searchOpsWithdrawByUserPhone_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\PayLogListDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_searchOpsWithdrawByUserPhone_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \PayLogListDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_searchOpsWithdrawByUserPhone_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_searchOpsTransactionBySellerUserPhone_args {
  static $_TSPEC;

  public $sellerUserPhone = null;
  public $source = null;
  public $dateInt = null;
  public $status = null;
  public $orderNo = null;
  public $serialNum = null;
  public $pageIndex = null;
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sellerUserPhone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'dateInt',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'orderNo',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'serialNum',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'pageIndex',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sellerUserPhone'])) {
        $this->sellerUserPhone = $vals['sellerUserPhone'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['dateInt'])) {
        $this->dateInt = $vals['dateInt'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['orderNo'])) {
        $this->orderNo = $vals['orderNo'];
      }
      if (isset($vals['serialNum'])) {
        $this->serialNum = $vals['serialNum'];
      }
      if (isset($vals['pageIndex'])) {
        $this->pageIndex = $vals['pageIndex'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_searchOpsTransactionBySellerUserPhone_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sellerUserPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dateInt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serialNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_searchOpsTransactionBySellerUserPhone_args');
    if ($this->sellerUserPhone !== null) {
      $xfer += $output->writeFieldBegin('sellerUserPhone', TType::STRING, 1);
      $xfer += $output->writeString($this->sellerUserPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 2);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateInt !== null) {
      $xfer += $output->writeFieldBegin('dateInt', TType::I32, 3);
      $xfer += $output->writeI32($this->dateInt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderNo !== null) {
      $xfer += $output->writeFieldBegin('orderNo', TType::STRING, 5);
      $xfer += $output->writeString($this->orderNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serialNum !== null) {
      $xfer += $output->writeFieldBegin('serialNum', TType::STRING, 6);
      $xfer += $output->writeString($this->serialNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageIndex !== null) {
      $xfer += $output->writeFieldBegin('pageIndex', TType::I32, 7);
      $xfer += $output->writeI32($this->pageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 8);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_searchOpsTransactionBySellerUserPhone_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\PayLogListDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_searchOpsTransactionBySellerUserPhone_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \PayLogListDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_searchOpsTransactionBySellerUserPhone_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_noticeOpsTransactionStatus_args {
  static $_TSPEC;

  public $orderNo = null;
  public $status = null;
  public $source = null;
  public $payType = null;
  public $sign = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderNo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'payType',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderNo'])) {
        $this->orderNo = $vals['orderNo'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['payType'])) {
        $this->payType = $vals['payType'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_noticeOpsTransactionStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_noticeOpsTransactionStatus_args');
    if ($this->orderNo !== null) {
      $xfer += $output->writeFieldBegin('orderNo', TType::STRING, 1);
      $xfer += $output->writeString($this->orderNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 2);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 3);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payType !== null) {
      $xfer += $output->writeFieldBegin('payType', TType::STRING, 4);
      $xfer += $output->writeString($this->payType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 5);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_noticeOpsTransactionStatus_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\StringDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_noticeOpsTransactionStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \StringDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_noticeOpsTransactionStatus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_noticeOpsTransactionClose_args {
  static $_TSPEC;

  public $orderNo = null;
  public $source = null;
  public $sign = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderNo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderNo'])) {
        $this->orderNo = $vals['orderNo'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_noticeOpsTransactionClose_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_noticeOpsTransactionClose_args');
    if ($this->orderNo !== null) {
      $xfer += $output->writeFieldBegin('orderNo', TType::STRING, 1);
      $xfer += $output->writeString($this->orderNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 2);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 3);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_noticeOpsTransactionClose_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\StringDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_noticeOpsTransactionClose_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \StringDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_noticeOpsTransactionClose_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_noticeRechargeOpsTransactionStatus_args {
  static $_TSPEC;

  public $orderNo = null;
  public $status = null;
  public $orderAmount = null;
  public $paymetChannel = null;
  public $source = null;
  public $sign = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderNo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'orderAmount',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'paymetChannel',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderNo'])) {
        $this->orderNo = $vals['orderNo'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['orderAmount'])) {
        $this->orderAmount = $vals['orderAmount'];
      }
      if (isset($vals['paymetChannel'])) {
        $this->paymetChannel = $vals['paymetChannel'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_noticeRechargeOpsTransactionStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->paymetChannel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_noticeRechargeOpsTransactionStatus_args');
    if ($this->orderNo !== null) {
      $xfer += $output->writeFieldBegin('orderNo', TType::STRING, 1);
      $xfer += $output->writeString($this->orderNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 2);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderAmount !== null) {
      $xfer += $output->writeFieldBegin('orderAmount', TType::STRING, 3);
      $xfer += $output->writeString($this->orderAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymetChannel !== null) {
      $xfer += $output->writeFieldBegin('paymetChannel', TType::I32, 4);
      $xfer += $output->writeI32($this->paymetChannel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 5);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 6);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_noticeRechargeOpsTransactionStatus_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\StringDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_noticeRechargeOpsTransactionStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \StringDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_noticeRechargeOpsTransactionStatus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_noticeOpsTransactionAmount_args {
  static $_TSPEC;

  public $orderNo = null;
  public $orderAmount = null;
  public $source = null;
  public $sign = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderNo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'orderAmount',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderNo'])) {
        $this->orderNo = $vals['orderNo'];
      }
      if (isset($vals['orderAmount'])) {
        $this->orderAmount = $vals['orderAmount'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_noticeOpsTransactionAmount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_noticeOpsTransactionAmount_args');
    if ($this->orderNo !== null) {
      $xfer += $output->writeFieldBegin('orderNo', TType::STRING, 1);
      $xfer += $output->writeString($this->orderNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderAmount !== null) {
      $xfer += $output->writeFieldBegin('orderAmount', TType::STRING, 2);
      $xfer += $output->writeString($this->orderAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 3);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 4);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YncInteractionService_noticeOpsTransactionAmount_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\StringDTO',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'YncInteractionService_noticeOpsTransactionAmount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \StringDTO();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YncInteractionService_noticeOpsTransactionAmount_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


